import os
import json
import random
import discord
from discord.ext import commands
import wavelink

TOKEN = os.getenv("DISCORD_TOKEN")
intents = discord.Intents.all()
bot = commands.Bot(command_prefix="!", intents=intents)

RANK_FILE = "rank.json"
if not os.path.exists(RANK_FILE):
    with open(RANK_FILE, "w") as f:
        json.dump({}, f)

def load_rank():
    with open(RANK_FILE, "r") as f:
        return json.load(f)

def save_rank(rank):
    with open(RANK_FILE, "w") as f:
        json.dump(rank, f)

# ---------- Music Node Setup ----------
@bot.event
async def on_ready():
    print(f"Bot {bot.user} is ready!")
    try:
        await wavelink.NodePool.create_node(
            bot=bot,
            host='lavalink.eu.org',
            port=2333,
            password='youshallnotpass',
            https=False
        )
    except Exception as e:
        print(f"Lavalink connection error: {e}")

# ---------- 1. Music Commands ----------
@bot.command()
async def join(ctx):
    if ctx.author.voice:
        await ctx.author.voice.channel.connect(cls=wavelink.Player)
        await ctx.send(f"Joined {ctx.author.voice.channel.name}")
    else:
        await ctx.send("Join a voice channel first!")

@bot.command()
async def leave(ctx):
    if ctx.voice_client:
        await ctx.voice_client.disconnect()
        await ctx.send("Disconnected!")
    else:
        await ctx.send("Not connected to a voice channel.")

@bot.command()
async def play(ctx, *, search: str):
    vc: wavelink.Player = ctx.voice_client
    if not vc:
        if ctx.author.voice:
            vc = await ctx.author.voice.channel.connect(cls=wavelink.Player)
        else:
            await ctx.send("You must be in a voice channel!")
            return
    tracks = await wavelink.YouTubeTrack.search(search)
    if not tracks:
        await ctx.send("No results found!")
        return
    track = tracks[0]
    await vc.play(track)
    await ctx.send(f"Now playing: {track.title}")

@bot.command()
async def stop(ctx):
    vc: wavelink.Player = ctx.voice_client
    if not vc:
        await ctx.send("Not in a voice channel.")
        return
    await vc.stop()
    await ctx.send("Stopped.")

# ---------- 2. AI Chat ----------
@bot.command()
async def ai(ctx, *, question=None):
    RESPONSES = [
        "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏á‡∏ö‡πâ‡∏≤‡∏á‡πÄ‡∏≠‡πà‡∏¢ üòä", "‡∏™‡∏π‡πâ‡πÜ ‡∏ô‡∏∞!", "‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏´‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏Å‡πá‡∏ö‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢",
        "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö‡∏â‡∏±‡∏ô!", "‡∏£‡∏±‡∏Å‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡∏ô‡∏µ‡πâ‡πÄ‡∏™‡∏°‡∏≠!", "‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÑ‡∏õ‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì!"
    ]
    if not question:
        await ctx.send("‡∏ñ‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏≠‡∏∞‡πÑ‡∏£‡∏Å‡πá‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢~")
    else:
        await ctx.send(random.choice(RESPONSES))

# ---------- 3. Rank/Level ----------
@bot.command()
async def addxp(ctx, user: discord.Member, xp: int):
    rank = load_rank()
    uid = str(user.id)
    rank[uid] = rank.get(uid, 0) + xp
    save_rank(rank)
    await ctx.send(f"{user.display_name} ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö XP ‡πÄ‡∏û‡∏¥‡πà‡∏° {xp}!")

@bot.command()
async def rank(ctx, user: discord.Member = None):
    rank = load_rank()
    user = user or ctx.author
    uid = str(user.id)
    xp = rank.get(uid, 0)
    await ctx.send(f"{user.display_name} ‡∏°‡∏µ XP {xp}")

# ---------- 4. Anti-Spam ----------
last_message = {}
@bot.event
async def on_message(message):
    if message.author.bot:
        return
    channel_id = message.channel.id
    user_id = message.author.id
    if channel_id not in last_message:
        last_message[channel_id] = {}
    last = last_message[channel_id].get(user_id, "")
    if message.content == last:
        await message.delete()
        await message.channel.send(f"{message.author.mention} ‡∏≠‡∏¢‡πà‡∏≤‡∏™‡πÅ‡∏õ‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡πâ‡∏≥‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ‡∏ô‡∏∞!")
    else:
        last_message[channel_id][user_id] = message.content
        await bot.process_commands(message)

# ---------- 5. Emoji Decorate ----------
@bot.command()
async def emoji(ctx, *, msg: str):
    EMOJIS = ["‚ú®", "üî•", "üíé", "üåà", "üéâ"]
    result = f"{random.choice(EMOJIS)} {msg} {random.choice(EMOJIS)}"
    await ctx.send(result)

# ---------- 6. Announce ----------
@bot.command()
async def announce(ctx, *, msg: str):
    await ctx.send(f"üì¢ **‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®:** {msg}")

# ---------- 7. Custom Room & Roles ----------
@bot.command()
async def create_private(ctx, name: str):
    overwrites = {
        ctx.guild.default_role: discord.PermissionOverwrite(read_messages=False),
        ctx.author: discord.PermissionOverwrite(read_messages=True)
    }
    channel = await ctx.guild.create_text_channel(name, overwrites=overwrites)
    await channel.send(f"‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {ctx.author.mention}!")

@bot.command()
async def giverole(ctx, member: discord.Member, *, role_name: str):
    role = discord.utils.get(ctx.guild.roles, name=role_name)
    if not role:
        role = await ctx.guild.create_role(name=role_name, colour=discord.Colour.random())
    await member.add_roles(role)
    await ctx.send(f"{member.mention} ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏¢‡∏® {role.name} ‡πÅ‡∏•‡πâ‡∏ß!")

# ---------- 8. Log ----------
@bot.event
async def on_command(ctx):
    print(f"[LOG] Command: {ctx.command} by {ctx.author} in {ctx.channel}")
    with open("self_improve.log", "a") as f:
        f.write(f"{ctx.author} used {ctx.command} in {ctx.channel}
")

# ---------- 9. Self-Upgrade ----------
@bot.command()
async def upgrade_ai(ctx):
    suggestions = [
        "‡∏Ñ‡∏ß‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° mini-game ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü",
        "‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏°‡∏î‡∏π‡∏• AI Chat ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢-‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏© (‡πÅ‡∏õ‡∏•/‡∏ñ‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)",
        "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô event, schedule ‡∏´‡∏£‡∏∑‡∏≠ countdown",
        "‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏£‡∏∞‡∏ö‡∏ö anti-spam ‡πÉ‡∏´‡πâ‡∏â‡∏•‡∏≤‡∏î‡∏Ç‡∏∂‡πâ‡∏ô ‡πÄ‡∏ä‡πà‡∏ô ‡πÉ‡∏ä‡πâ AI ‡∏à‡∏±‡∏ö pattern ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°",
        "‡πÄ‡∏Å‡πá‡∏ö log ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô/‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå",
        "‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡∏£‡∏∞‡∏¢‡∏∞‡∏¢‡∏≤‡∏ß",
        "‡πÉ‡∏™‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢/‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÉ‡∏´‡∏°‡πà/auto-ban"
    ]
    await ctx.send("üß† **AI Suggestion:** " + random.choice(suggestions))

# ---------- 10. Pin Help ----------
@bot.command()
async def pinhelp(ctx):
    msg = (
        "**üéâ ‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ö‡∏≠‡∏ó‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ üéâ**\n"
        "- !join / !leave : ‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏ó‡πÄ‡∏Ç‡πâ‡∏≤-‡∏≠‡∏≠‡∏Å‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á\n"
        "- !play [‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏•‡∏á‡∏´‡∏£‡∏∑‡∏≠ url] : ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏û‡∏•‡∏á\n"
        "- !stop : ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏û‡∏•‡∏á\n"
        "- !ai [‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°] : ‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö AI\n"
        "- !addxp @user 10 : ‡πÄ‡∏û‡∏¥‡πà‡∏° XP ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô\n"
        "- !rank : ‡∏î‡∏π XP ‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á\n"
        "- !giverole @user ‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏® : ‡∏£‡∏±‡∏ö/‡πÅ‡∏à‡∏Å‡∏¢‡∏®\n"
        "- !create_private [‡∏ä‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á] : ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß\n"
        "- !announce ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° : ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏Ç‡πà‡∏≤‡∏ß\n"
        "- !emoji ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° : ‡∏ï‡∏Å‡πÅ‡∏ï‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°\n"
        "- !upgrade_ai : ‡∏Ç‡∏≠‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÉ‡∏´‡∏°‡πà ‡πÜ ‡∏à‡∏≤‡∏Å AI"
    )
    msg_obj = await ctx.send(msg)
    await msg_obj.pin()

bot.run(TOKEN)